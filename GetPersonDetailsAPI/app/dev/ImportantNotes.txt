  Important commands for creating and running the sample node js API application  
  1) npm init
  2) npm i express
  3) node application.js
  4) APP_BASE_URL: http://localhost:9091/application/test/data
  ---------------------------------------------------------------------------------
  Commands for Docker
  1) touch dockerfile -> to create the new docker file inside your project
  ---------------------------------------------------------------------------------
  Building Docker image in the container
  1) cd GetPersonDetailsAPI/
  2) cd app/dev/
  3) docker build -t GetPersonDetailsAPI-app .
  ---------------------------------------------------------------------------------
  Commands for Executing the testing.js file for Get API test
  1) npm install mocha chai chai-http --save-dev
  2) node app/dev/application.js
  2) npx mocha app/test/testing.js
  ----------------------------------------------------------------------------------
  Commands for cheking and deleting the images
  1) docker images -> this command will give us the total number of images
  2) docker image rm <name of the image> -> delete the specific image
  3) docker image rm <image name> -f -> this command will delete the running images forcefully
  4) docker ps -a -> this comand will give us the list of all containers
  5) docker container rm <name of the container> -> delete the stale containers
  6) docker container rm <name of the container> -f -> delete the running container forcefully
  ------------------------------------------------------------------------------------
  Command to delete all docker containers & their images
  1) docker system prune -a
  -------------------------------------------------------------------------------------
  Command to create new image version for the project
  1) docker build -t <name of the project or image>:v2 -> in ths command :v2 is used for defining the image version
  2) docker run --name <name of the container>-v2 -p 9091:9091 <name of the project or image>:v2 -> Here <name of the container>-v2 is the name of a different container for v2 image
  --------------------------------------------------------------------------------------
  Commands For Configuring Docker Volumes
  Note: Docker volumes are used to persist and share data generated by and used by Docker containers. They allow data to be stored outside the container's filesystem, ensuring it remains intact even if the container is updated, stopped, or removed. Volumes are particularly useful for stateful applications like databases and for sharing data between containers.
  1) npm i nodemon -> Nodemon is a utility tool used in Node.js development that automatically restarts the Node.js application when changes are detected in the monitored files within the project directory.
  2) "dev": "nodemon application.js" -> Add this command into package.json file under "Scripts"
  3) npm run dev -> Run this command in the terminal to initialize your application and see the application always reflecting the latest code changes.
  4) docker build -t <name of the project or image> . -> . operator after <name of the project or image> is important for invoking new file changes in the container 
  5) docker run --name <name of container> -p <port number> --rm -v <Absolute Path of Project From Local System>:<WORKDIR Path Mentioned in the dockerfile> <any name>
  Note: -v is used for creating the volumes
  Example Command:
  docker run --name basicApplication -p 9091:9091 --rm -v C:/Users/ABC/Desktop/basicApplication:/GetPersonDetailsAPI/app basic-app
  Note: Once you run the container then do some local changes and save the local changes it will reflect automatically on the container.
  ----------------------------------------------------------------------------------------
  Docker compose.yaml file
  The docker-compose.yml file serves as a configuration file for Docker Compose, a tool used to define and run multi-container Docker applications.
  1) touch compose.yaml -> to create new compose.yaml file
  2) docker compose up -> to run the compose.yaml file
  ----------------------------------------------------------------------------------------
  Push our project image to docker hub
  1) Create an account on docker hub platform : https://hub.docker.com/
  2) Create a repository on the docker hub with any name
  3) Build the project image using command: docker build -t <account name/repository name> .
  4) Check the image details by using command: docker images
  5) Login to the docker hub account using the command: docker Login
  6) Push your project to docker repository with below command
  command: docker push <account name/repository name> tagname 
  command: docker push <image name> 
  -----------------------------------------------------------------------------------------
  Pull project images from the docker hub
  1) Command: docker Login
  2) Command: docker pull <image name>
  -----------------------------------------------------------------------------------------
  Upload image on the server and run the application to go live in the production.
  1) Go to dockerhub "https://hub.docker.com/"
  2) Create a repository
  3) Build image with below command to run the image on different operating systems
  Command: docker buildx --platform=linux/amd64 -t <repository name> .
  4) Push image to repository with below command
  Command: docker push <imageName>
  5) Open Play With Docker Website "https://www.docker.com/play-with-docker/"
  6) Create account and login with docker hub
  7) Go to Public view and enter the docker pull command on the Play With Docker Website console
  8) Check the all images with command: docker images
  9) Run container on Play With Docker Website using command: docker run -p 5500:5500 <image Name> 